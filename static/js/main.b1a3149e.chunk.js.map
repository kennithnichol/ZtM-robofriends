{"version":3,"sources":["components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducer.js","serviceWorker.js","index.js"],"names":["Header","nextProps","nextState","react_default","a","createElement","className","Component","Card","_ref","name","email","username","id","src","concat","alt","CardList","robots","map","user","index","components_Card","key","SearchBox","searchfield","searchChange","for","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","searchField","filteredRobots","filter","robot","toLowerCase","includes","length","components_Header","components_SearchBox","onSearchChange","searchFilter","components_Scroll","components_CardList","connect","dispatch","event","payload","target","value","initialState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","logger","createLogger","store","createStore","arguments","undefined","action","assign","applyMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b1a3149e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nconst Card = ({ name, email, id, username }) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${username}?200x200`} alt='generated robot' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, index) => (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tid={user.id}\r\n\t\t\t\t\t\temail={user.email}\r\n\t\t\t\t\t\tname={user.name}\r\n\t\t\t\t\t\tusername={user.username}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<label for=\"search-robots\" className=\"dn\">Filter robofriends</label>\r\n\t\t\t<input\r\n\t\t\t\tid='search-robots'\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue \"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder=\"Search robots\"\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => (\r\n\t<div style={{overflowY: 'scroll', border: '1px solid black', height: 500}}>\r\n\t\t{props.children}\r\n\t</div>\r\n);\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Header from '../components/Header';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport {setSearchField} from '../actions';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchField\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => {\r\n\t\t\tdispatch(setSearchField(event.target.value))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({ robots: users }))\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots } = this.state;\r\n\t\tconst { searchField } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => (\r\n\t\t\trobot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t))\r\n\r\n\t\treturn !robots.length ?\r\n\t\t\t( <div className='tc'><h1>Loading</h1></div> ) :\r\n\t\t\t(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBox\r\n\t\t\t\t\tsearchChange={this.props.onSearchChange}\r\n\t\t\t\t\tsearchFilter={this.searchField}\r\n\t\t\t\t/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n","import {CHANGE_SEARCH_FIELD} from './constants';\r\n\r\nconst initialState = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialState, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// Global imports\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport 'tachyons';\r\n\r\n// Local imports\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport {searchRobots} from './reducer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(searchRobots, applyMiddleware(logger));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}