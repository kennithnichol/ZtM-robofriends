{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","blocks/App.js","actions.js","constants.js","reducer.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","username","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","index","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","searchField","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","onSearchChange","searchFilter","components_Scroll","components_CardList","Component","connect","dispatch","event","payload","target","value","initialState","Boolean","window","location","hostname","match","logger","createLogger","store","createStore","arguments","undefined","action","assign","applyMiddleware","ReactDOM","render","es","src_blocks_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.952727c0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id, username }) => {\n\treturn (\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${username}?200x200`} alt='generated robot' />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, index) => (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tid={user.id}\n\t\t\t\t\t\temail={user.email}\n\t\t\t\t\t\tname={user.name}\n\t\t\t\t\t\tusername={user.username}\n\t\t\t\t\t/>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue \"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"Search robots\"\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => (\n\t<div style={{overflowY: 'scroll', border: '1px solid black', height: 500}}>\n\t\t{props.children}\n\t</div>\n);\n\nexport default Scroll;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport {setSearchField} from '../actions';\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchField\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => {\n\t\t\tdispatch(setSearchField(event.target.value))\n\t\t}\n\t}\n}\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({ robots: users }))\n\t}\n\n\trender() {\n\t\tconst { robots } = this.state;\n\t\tconst { searchField } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => (\n\t\t\trobot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t))\n\n\t\treturn !robots.length ?\n\t\t\t( <div className='tc'><h1>Loading</h1></div> ) :\n\t\t\t(\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className=\"f1\">Robot Friends</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tsearchChange={this.props.onSearchChange}\n\t\t\t\t\tsearchFilter={this.searchField}\n\t\t\t\t/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from './constants';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n","import {CHANGE_SEARCH_FIELD} from './constants';\n\nconst initialState = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Global imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport 'tachyons';\n\n// Local imports\nimport './index.css';\nimport App from './blocks/App';\nimport {searchRobots} from './reducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst store = createStore(searchRobots, applyMiddleware(logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}